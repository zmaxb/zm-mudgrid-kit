@typeparam T where T : class
@using Microsoft.Extensions.Localization
@using MudBlazor
@using Zm.MudGridKit.Interfaces
@using Zm.MudGridKit.Resources
@inherits ZmMudDataGridBase<T>
@inject IStringLocalizerFactory LocalizerFactory
@inject IReadOnlyDataGridService<T> CrudDataGridService

<MudDataGrid T="T" @ref="DataGrid"
             MultiSelection="Options.MultiSelection"
             SortMode="SortMode.Single"
             Hideable="true"
             RowsPerPage="Options.DefaultPageSize"
             ServerData="WrappedServerLoadData"
             ShowMenuIcon="Options.ShowMenuIcon"
             ShowColumnOptions="Options.ShowColumnOptions"
             ShowFilterIcons="Options.ShowFilterIcons">

    <ToolBarContent>
        @if (!string.IsNullOrEmpty(Options.Title))
        {
            <MudText Typo="Typo.h6">@Options.Title</MudText>
            <MudSpacer/>
        }
        <MudSpacer/>
        @if (Options.SearchEnabled)
        {
            <MudTextField T="string"
                          ValueChanged="@(s => OnSearch(s))"
                          Placeholder=@L["Placeholder.Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0"/>
        }
        @if (TopRightContent is not null)
        {
            @TopRightContent
        }
    </ToolBarContent>

    <Columns>
        @Columns
    </Columns>

    <PagerContent>
        @if (Options.ShowPager)
        {
            <MudDataGridPager T="T" PageSizeOptions="@Options.PageSizeOptions"/>
        }
    </PagerContent>

</MudDataGrid>

@code {

    protected override void OnInitialized()
    {
        L = LocalizerFactory.Create(
            "ZmMudDataGridLocalization",
            typeof(ZmMudDataGridLocalization).Assembly.GetName().Name!
        );
    }

    protected override Task<GridData<T>> LoadData(GridState<T> state)
    {
        return CrudDataGridService.LoadData(state);
    }

    protected override Task OnSearch(string? searchText)
    {
        return searchText != null ? CrudDataGridService.OnSearch(searchText) : Task.CompletedTask;
    }

}

@using Microsoft.Extensions.Localization
@using MudBlazor
@using Zm.MudGridKit.DataGrid
@using Zm.MudGridKit.Interfaces
@using Zm.MudGridKit.Resources
@typeparam T where T : class
@inject IStringLocalizerFactory LocalizerFactory
@inject IDataGridService<T> DataGridService
@inject IDialogService DialogService

@namespace Zm.MudGridKit.Components

<MudDataGrid T="T" @ref="DataGrid"
             MultiSelection="Options.MultiSelection"
             SortMode="SortMode.Single"
             Hideable="true"
             RowsPerPage="Options.DefaultPageSize"
             ServerData="WrappedServerLoadData"
             ShowMenuIcon="Options.ShowMenuIcon"
             ShowColumnOptions="Options.ShowColumnOptions"
             ShowFilterIcons="Options.ShowFilterIcons">

    <ToolBarContent>
        @if (!string.IsNullOrEmpty(Options.Title))
        {
            <MudText Typo="Typo.h6">@Options.Title</MudText>
            <MudSpacer/>
        }
        <MudButton OnClick="OnAdd" Color="Color.Primary">@L["Button.Add"]</MudButton>
        <MudButton OnClick="@(_ => OnEdit(DataGrid.SelectedItems.FirstOrDefault()))" Color="Color.Secondary"
                   Disabled="@(DataGrid.Selection.Count != 1)">@L["Button.Edit"]
        </MudButton>
        <MudButton OnClick="OnDelete" Color="Color.Error" Disabled="@(DataGrid.Selection.Count == 0)">
            @L["Button.Delete"]
        </MudButton>
        <MudSpacer/>
        @if (Options.SearchEnabled)
        {
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder=@L["Placeholder.Search"]
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
        @if (TopRightContent is not null)
        {
            @TopRightContent
        }
    </ToolBarContent>

    <Columns>
        @Columns
    </Columns>

    <PagerContent>
        @if (Options.ShowPager)
        {
            <MudDataGridPager T="T" PageSizeOptions="@Options.PageSizeOptions"/>
        }
    </PagerContent>

</MudDataGrid>

@* ReSharper disable once MemberCanBePrivate.Global *@

@code {

    [Parameter] public DataGridOptions Options { get; set; } = new();
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public RenderFragment? TopRightContent { get; set; }

    private IStringLocalizer L = null!;

    /// <summary>
    ///     Direct access to the internal MudDataGrid component.
    ///     Use with care if built-in methods are not enough.
    /// </summary>
    public MudDataGrid<T> DataGrid = null!;

    private async Task<GridData<T>> WrappedServerLoadData(GridState<T> state)
    {
        DataGrid.SelectedItems.Clear();
        return await DataGridService.LoadData(state);
    }

    protected override void OnInitialized()
    {
        L = LocalizerFactory.Create(
            "ZmMudDataGridLocalization",
            typeof(ZmMudDataGridLocalization).Assembly.GetName().Name!
        );

        DataGridService.DialogService = DialogService;
    }

    private async Task OnAdd()
    {
        await DataGridService.OnAdd();
        await DataGrid.ReloadServerData();
    }

    private async Task OnEdit(T? entity)
    {
        if (entity == null)
            return;

        await DataGridService.OnEdit(entity);
        await DataGrid.ReloadServerData();
    }

    private async Task OnDelete()
    {
        var selectedItem = DataGrid.SelectedItems.ToList();
        await DataGridService.OnDelete(selectedItem);
        await DataGrid.ReloadServerData();
    }

    private async Task OnSearch(string? searchText)
    {
        if (searchText != null)
        {
            await DataGridService.OnSearch(searchText);
        }

        await DataGrid.ReloadServerData();
    }

    public async Task ReloadAsync()
    {
        await DataGrid.ReloadServerData();
    }

}